@startuml arquitectura

skinparam linetype polyline
skinparam arrowLollipopColor #ADD1B2

MainView -right(0- MainPresenter : IMainContract.Presenter
MainView -right0)- MainPresenter : IMainContract.View
MainView -up..-> InfoActivity : <<use>>
MainView -down..> DetailsView : <<use>>
MainView -down..> ConfigView : <<use>>


MainPresenter -right(0- Repository : IRepository

together {
  interface IMainContract#View
  interface IMainContract#Presenter
  interface IRepository
  interface ICallBack
}

class MainPresenter {
   IMainViewContract.View view
   List<Charger> shownChargers
   Double userLat
   Double userLon
   List<EOperator> filtrosAplicar
   int typeCharger
   boolean init
   boolean ubi
   boolean type
   load()
   APIArguments onApiArgs(int [] idsFiltros, int typeCharger, Double userLat, Double userLon) 
   obtainUbi(double uLat, double uLon)
   resetButton()
   setUbi(boolean a)
   setInit(boolean a)
   setType(boolean a)
   setKeys()
   List<Charger> getShownChargers()
   setView(IMainContract.View view)
   setUserLat(double userLat)
   setUserLon(double userLon)
   setTypeCharger(int typeCharger)
}

class MainView {
   IRepository repository
   IMainContract.Presenter presenter
   GifImageView loading
   FusedLocationProviderClient fusedLocationClient
   double userLat
   double userLon
   boolean[] checked
   ActionBar actionBar
   SharedPreferences sharedPreferences
   int idSelection
   showUserDetails()
   boolean checkLocationPermission() 
   requestLocationPermission()
   obtenerUbicacion()
   mostrarDialogoUbicacion()
   mostrarDialogoFiltros()
   showLoading()
}

class ChargersArrayAdapter {
   
}

class CommentsArrayAdapter {}

class PhotosArrayAdapter {}

class ConfigView {
   ActionBar actionBar
}
class DetailsView {
   double lat
   double lon
   Charger charger
   pulsaWeb(View view)
   anhadirInfoTipoCargador(Set<ConnectionType> connectionTypes, StringBuilder builder)
   anhadirInfoCoste(String coste, StringBuilder builder)
   anhadirInfoUbicacion(Address address, StringBuilder builder)
}

interface IMainContract#View {
    init()
    IRepository getRepository()
    showChargers(List<Charger> chargers)
    showLoadCorrect(int chargers)
    showLoadError()
    showChargerDetails(Charger charger)
    showInfoActivity()
    showUserDetails()
    showLoading()
    obtenerUbicacion();
}

interface IMainContract#Presenter {
   init(View view)
   onChargerClicked(int index)
   onMenuInfoClicked()
   onMenuUserClicked()
   obtainUbi(double userLat, double userLon)
   obtainType(int idCharger)
   obtainFiltros(List<EOperator> filtrosSeleccionados)
   resetButton()
   onMenuRefreshClicked()  
   setKeys()
}

interface IRepository {
    requestChargers(APIArguments args, ICallBack cb)
}

interface ICallBack {
    onSuccess(List<Charger> chargers)
    onFailure(Throwable e)
}

@enduml