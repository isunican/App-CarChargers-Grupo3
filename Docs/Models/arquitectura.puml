@startuml
skinparam linetype polyline
skinparam arrowLollipopColor #ADD1B2

MainView -right(0- MainPresenter : IMainContract.Presenter
MainView -right0)- MainPresenter : IMainContract.View
MainView -up..-> InfoActivity : <<use>>
MainView -down..> DetailsView : <<use>>
MainPresenter -right(0- Repository : IRepository

together {
  interface IMainContract#View
  interface IMainContract#Presenter
  interface IRepository
  interface ICallBack
}

interface IMainContract#View {
    init()
    IRepository getRepository()
    showChargers(List<Charger> chargers)
    showLoadCorrect(int chargers)
    showLoadError()
    showChargerDetails(Charger charger)
    showInfoActivity()
    setLocation(double uLat, double uLon)
}

interface IMainContract#Presenter {
   init(View view);
   onChargerClicked(int index)
   onMenuInfoClicked();
   obtainUbi(double userLat, double userLon)
   resetButtonn()
   loadConFiltrosEmpresas(List<EOperator> filtrosSeleccionados)
}

interface IRepository {
    requestChargers(APIArguments args, ICallBack cb)
}

interface ICallBack {
    onSuccess(List<Charger> chargers)
    onFailure(Throwable e)
}
interface IOpenChargeMapAPI {
    String COUNTRY_CODE
    String OPERATOR_ID
    String LATITUDE
    String LONGITUDE
    String MAX_RESULTS
    
}
class LocationComparator {
    double userLat
    double userLon
    int R
    calculateDistance(double lat1, double lon1, double lat2, double lon2)
    compare(Charger o1, Charger o2)
}
class MainView {
    GifImageView loading
    ImageView logo
    FusedLocationProviderClient fusedLocationClient
    double userLat
    double userLon
    TextView infoUbi
    boolean[] checked
    checkLocationPermission()
    requestLocationPermission()
    obtenerUbicacion()
    mostrarDialogoUbicacion()
    mostrarDialogoFiltros()
}
class MainPresenter {
    String DEBUG_PRESENTER
    IMainContract.View view
    List<Charger> shownChargers
    Double userLat
    Double userLon
    load()
    loadConFiltrosEmpresas(List<EOperator> filtrosSeleccionados)
    obtainUbi(double uLat, double uLon)
    resetButton()
}
class Repository {
    IOpenChargeMapAPI api
    Repository(IOpenChargeMapAPI api)
    cleanArguments(Map<String,Object> map)
}
class DetailsView {
    String INTENT_CHARGER
    String STR_UBI
    double lat
    double lon
    Charger charger
    pulsaWeb(View view)
}
class ApplicationConstants {
    Double userLatSim
    Double userLonSim
    isLocationMocked()
    setLocationMock(Double uLat, Double uLon)
    getLatMock()
    getLonMock()
    
}
@enduml